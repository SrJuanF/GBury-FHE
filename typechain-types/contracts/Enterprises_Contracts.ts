/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Enterprises_Contracts {
  export type SignerStruct = {
    signer: BytesLike;
    hasSigned: BytesLike;
    retreated: BytesLike;
  };

  export type SignerStructOutput = [
    signer: string,
    hasSigned: string,
    retreated: string
  ] & { signer: string; hasSigned: string; retreated: string };

  export type RequestStruct = {
    contractId: BigNumberish;
    isDecryptionPending: boolean;
    latestRequestId: BigNumberish;
  };

  export type RequestStructOutput = [
    contractId: bigint,
    isDecryptionPending: boolean,
    latestRequestId: bigint
  ] & {
    contractId: bigint;
    isDecryptionPending: boolean;
    latestRequestId: bigint;
  };
}

export interface Enterprises_ContractsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CustomCallback"
      | "createContract"
      | "getContract"
      | "getContractCounter"
      | "getContractSigners"
      | "getLastRequest"
      | "getSignerContracts"
      | "retreatContract"
      | "signContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DecryptionFulfilled" | "SignerAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CustomCallback",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createContract",
    values: [
      BytesLike,
      string,
      string,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractSigners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSignerContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retreatContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signContract",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CustomCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignerContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retreatContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signContract",
    data: BytesLike
  ): Result;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerAddedEvent {
  export type InputTuple = [
    signer: AddressLike,
    contractId: BigNumberish,
    title: string,
    typeDoc: string
  ];
  export type OutputTuple = [
    signer: string,
    contractId: bigint,
    title: string,
    typeDoc: string
  ];
  export interface OutputObject {
    signer: string;
    contractId: bigint;
    title: string;
    typeDoc: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Enterprises_Contracts extends BaseContract {
  connect(runner?: ContractRunner | null): Enterprises_Contracts;
  waitForDeployment(): Promise<this>;

  interface: Enterprises_ContractsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CustomCallback: TypedContractMethod<
    [
      requestId: BigNumberish,
      addr1: AddressLike,
      addr2: AddressLike,
      addr3: AddressLike,
      addr4: AddressLike,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  createContract: TypedContractMethod<
    [
      _hash: BytesLike,
      title: string,
      description: string,
      typeDoc: string,
      addr1: BytesLike,
      addr2: BytesLike,
      addr3: BytesLike,
      addr4: BytesLike,
      attestation: BytesLike
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  getContract: TypedContractMethod<
    [contractId: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        id: string;
        title: string;
        description: string;
        typeDoc: string;
        createdAt: string;
        updatedAt: string;
        hashdoc: string;
        isActive: string;
        requiredSignatures: string;
        currentSignatures: string;
        currentSignaturesRetreated: string;
      }
    ],
    "view"
  >;

  getContractCounter: TypedContractMethod<[], [bigint], "view">;

  getContractSigners: TypedContractMethod<
    [contractId: BigNumberish],
    [
      [
        Enterprises_Contracts.SignerStructOutput,
        Enterprises_Contracts.SignerStructOutput,
        Enterprises_Contracts.SignerStructOutput,
        Enterprises_Contracts.SignerStructOutput
      ]
    ],
    "view"
  >;

  getLastRequest: TypedContractMethod<
    [],
    [Enterprises_Contracts.RequestStructOutput],
    "view"
  >;

  getSignerContracts: TypedContractMethod<[], [string[]], "view">;

  retreatContract: TypedContractMethod<
    [contractId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  signContract: TypedContractMethod<
    [contractId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CustomCallback"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      addr1: AddressLike,
      addr2: AddressLike,
      addr3: AddressLike,
      addr4: AddressLike,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createContract"
  ): TypedContractMethod<
    [
      _hash: BytesLike,
      title: string,
      description: string,
      typeDoc: string,
      addr1: BytesLike,
      addr2: BytesLike,
      addr3: BytesLike,
      addr4: BytesLike,
      attestation: BytesLike
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getContract"
  ): TypedContractMethod<
    [contractId: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        id: string;
        title: string;
        description: string;
        typeDoc: string;
        createdAt: string;
        updatedAt: string;
        hashdoc: string;
        isActive: string;
        requiredSignatures: string;
        currentSignatures: string;
        currentSignaturesRetreated: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractSigners"
  ): TypedContractMethod<
    [contractId: BigNumberish],
    [
      [
        Enterprises_Contracts.SignerStructOutput,
        Enterprises_Contracts.SignerStructOutput,
        Enterprises_Contracts.SignerStructOutput,
        Enterprises_Contracts.SignerStructOutput
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastRequest"
  ): TypedContractMethod<
    [],
    [Enterprises_Contracts.RequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSignerContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "retreatContract"
  ): TypedContractMethod<[contractId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "signContract"
  ): TypedContractMethod<[contractId: BigNumberish], [bigint], "nonpayable">;

  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "SignerAdded"
  ): TypedContractEvent<
    SignerAddedEvent.InputTuple,
    SignerAddedEvent.OutputTuple,
    SignerAddedEvent.OutputObject
  >;

  filters: {
    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "SignerAdded(address,uint64,string,string)": TypedContractEvent<
      SignerAddedEvent.InputTuple,
      SignerAddedEvent.OutputTuple,
      SignerAddedEvent.OutputObject
    >;
    SignerAdded: TypedContractEvent<
      SignerAddedEvent.InputTuple,
      SignerAddedEvent.OutputTuple,
      SignerAddedEvent.OutputObject
    >;
  };
}
